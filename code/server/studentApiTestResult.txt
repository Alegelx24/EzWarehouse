Server listening at http://localhost:3001


  InternalOrder - /api/internalOrders/...
[0mGET /api/restockOrders/1234 [33m404[0m 48.983 ms - 11[0m
[0mPOST /api/internalOrders [32m201[0m 57.536 ms - 9[0m
    âœ” Insert a new internal order  (62ms)
[0mPOST /api/internalOrders [33m422[0m 7.920 ms - 22[0m
    âœ” Insert a new internal order 
[0mPOST /api/internalOrders [32m201[0m 287.351 ms - 9[0m
[0mGET /api/internalOrders [32m200[0m 538.169 ms - 433[0m
    âœ” getting all internal orders from the system (1437ms)
[0mPOST /api/internalOrders [32m201[0m 111.758 ms - 9[0m
[0mGET /api/internalOrdersIssued [32m200[0m 658.633 ms - 649[0m
    âœ” getting all internal orders in issued state from the system (1269ms)
[0mPOST /api/internalOrders [32m201[0m 7.873 ms - 9[0m
[0mGET /api/internalOrdersAccepted [32m200[0m 2.783 ms - 2[0m
    âœ” getting all internal orders in accepted state from the system (189ms)
[0mGET /api/internalOrders/679 [32m200[0m 3.194 ms - 119[0m
    âœ” Get order by id
[0mGET /api/internalOrders/120 [33m404[0m 3.335 ms - 11[0m
    âœ” Get order by id
[0mGET /api/internalOrders/ciao [33m422[0m 0.385 ms - 22[0m
    âœ” Get order by id
[0mPUT /api/internalOrders/680 [32m200[0m 10.046 ms - 4[0m
    âœ” Update the state of an order
[0mPUT /api/internalOrders/681 [33m422[0m 7.076 ms - 22[0m
    âœ” Update the state of an order
[0mPUT /api/internalOrders/682 [33m422[0m 5.070 ms - 22[0m
    âœ” Update the state of an order
undefined
[0mDELETE /api/internalOrders/683 [32m204[0m 2.407 ms - -[0m
    âœ” Delete an internal order
[0mDELETE /api/internalOrders/pippo [33m422[0m 4.168 ms - 22[0m
    âœ” Delete an internal order (48ms)

  Item - POST /api/item
[0mPOST /api/item [32m201[0m 5.972 ms - 9[0m
    âœ” Insert a item
[0mPOST /api/item [33m422[0m 2.780 ms - 22[0m
    âœ” Insert a item
[0mPOST /api/item [33m404[0m 1.546 ms - 11[0m
    âœ” Insert a item

  Item - GET /api/items
[0mGET /api/items [32m200[0m 0.727 ms - 2[0m
    âœ” Get all item

  Item - GET /api/items/:id/:supplierId
[0mGET /api/items/10/1 [32m200[0m 1.408 ms - 76[0m
    âœ” Get item by id
[0mGET /api/items/1/1 [33m404[0m 17.939 ms - 11[0m
    âœ” Get item by id
[0mGET /api/items/test/1 [33m422[0m 6.373 ms - 22[0m
    âœ” Get item by id

  Item - PUT /api/item/:id/:supplierId
    âœ” Update a item
[0mPUT /api/item/10/1 [33m404[0m 8.454 ms - 11[0m
    âœ” Update a item

  Item - DELETE /api/items/:id/:supplierId
[0mPUT /api/item/10/1 [33m422[0m 7.401 ms - 22[0m
[0mDELETE /api/items/10/1 [32m204[0m 9.685 ms - -[0m
    âœ” Delete an item
[0mDELETE /api/items/id/1 [33m422[0m 4.357 ms - 22[0m
    âœ” Delete an item

  Position - POST /api/position
[0mPOST /api/position [32m201[0m 13.070 ms - 9[0m
    âœ” Insert a position

  Position - GET /api/positions
[0mGET /api/positions [32m200[0m 7.384 ms - 138[0m
    âœ” Get positions

  Position - PUT /api/position/:positionID
[0mPOST /api/position [32m201[0m 23.102 ms - 9[0m
    âœ” Insert a position
[0mPUT /api/position/100020003000 [32m200[0m 6.095 ms - 4[0m
    âœ” Update position
[0mPUT /api/position/888899991111 [33m404[0m 2.573 ms - 11[0m
    âœ” Update position
[0mPUT /api/position/300040005000 [33m422[0m 2.675 ms - 22[0m
    âœ” Update position

  Position - PUT /api/position/:positionID/changeID
[0mPUT /api/position/300040005000/changeID [32m200[0m 4.259 ms - 4[0m
    âœ” Update position changeID
[0mPUT /api/position/111122223333/changeID [33m404[0m 1.776 ms - 11[0m
    âœ” Update position changeID
[0mPUT /api/position/300040005000/changeID [33m422[0m 1.928 ms - 22[0m
    âœ” Update position changeID

  Position - DELETE /api/position/:positionID
[0mDELETE /api/position/800090007000 [32m204[0m 2.428 ms - -[0m
    âœ” Delete position
[0mDELETE /api/position/111122223333 [33m422[0m 2.503 ms - 22[0m
    âœ” Delete position

  RestockOrder -/api/restockOrder/...
[0mPOST /api/restockOrder [33m422[0m 5.743 ms - 22[0m
    âœ” Insert a new restock order 
[0mPOST /api/restockOrder [33m422[0m 2.047 ms - 164[0m
    âœ” Insert a new restock order 
[0mPOST /api/restockOrder [33m422[0m 31.753 ms - 22[0m
AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 201 but got 422
    at /Users/michelemorgigno/Dropbox (Politecnico Di Torino Studenti)/PoliTo/Software Engineering/progetto_gruppo/EzWh/code/server/test/api_restock_order.js:131:25
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {
  showDiff: true,
  actual: 422,
  expected: 201
}
    1) getting all restock orders from the system
[0mPOST /api/restockOrder [33m422[0m 4.898 ms - 22[0m
    2) getting all restock orders in state issued from the system
[0mGET /api/restockOrders/687 [32m200[0m 6.257 ms - 145[0m
    âœ” Get order by id
[0mGET /api/restockOrders/122 [33m404[0m 0.586 ms - 11[0m
    âœ” Get order by id
[0mGET /api/restockOrders/pippo [33m422[0m 0.560 ms - 22[0m
    âœ” Get order by id
[0mPUT /api/restockOrder/688 [32m200[0m 2.700 ms - 4[0m
    âœ” Update the state of an order
[0mPUT /api/restockOrder/689 [33m422[0m 0.960 ms - 22[0m
    âœ” Update the state of an order
[0mPUT /api/restockOrder/690 [33m422[0m 0.963 ms - 22[0m
    âœ” Update the state of an order
[0mPUT /api/restockOrder/691/skuItems [32m200[0m 6.198 ms - -[0m
    âœ” add list of sku items to a restock order
[0mGET /api/restockOrders/1232 [33m404[0m 0.629 ms - 11[0m
    âœ” add list of sku items to a restock order
[0mPUT /api/restockOrder/692/skuItems [33m422[0m 1.417 ms - 22[0m
    âœ” add list of sku items to a restock order
[0mPUT /api/restockOrder/693/transportNote [32m200[0m 2.529 ms - -[0m
    âœ” add transport note to a restock order
[0mPUT /api/restockOrder/694/transportNote [33m422[0m 0.945 ms - 22[0m
    âœ” add transport note to a restock order with invalid order state
[0mDELETE /api/restockOrder/695 [32m204[0m 1.961 ms - -[0m
    âœ” Delete a restock order
[0mDELETE /api/restockOrder/pippo [33m422[0m 0.652 ms - 22[0m
    âœ” Delete a restock order

  ReturnOrder - POST /api/returnOrder
{
  returnDate: '2022/01/29 09:33',
  products: [
    {
      SKUId: 876,
      description: 'Shirts',
      price: 15.45,
      RFID: '89945678901234567878965456789016'
    },
    {
      SKUId: 156,
      description: 'Hats',
      price: 4.99,
      RFID: '24345678901234567890123456789038'
    }
  ],
  restockOrderId: 696
}
[0mPOST /api/returnOrder [33m422[0m 2.061 ms - 22[0m
    3) Testing creation of new return order.

  ReturnOrder - GET /api/returnOrders
[0mGET /api/returnOrders [32m200[0m 2.122 ms - 578[0m
    4) Testing getting all return orders.

  ReturnOrder - GET /api/returnOrders/:id
[0mGET /api/returnOrders [32m200[0m 1.092 ms - 578[0m
[0mGET /api/returnOrders/704 [32m200[0m 1.623 ms - 287[0m
    âœ” Testing getting return order by id.

  ReturnOrder - DELETE /api/returnOrders/:id
[0mGET /api/returnOrders [32m200[0m 1.686 ms - 578[0m
[0mDELETE /api/returnOrder/708 [32m204[0m 4.323 ms - -[0m
    âœ” Testing deleting return order by id.

  SKU - POST /api/sku
[0mPOST /api/sku [32m201[0m 3.380 ms - 9[0m
    âœ” Insert an sku
[0mPOST /api/sku [33m422[0m 1.373 ms - 22[0m
    âœ” Insert an sku

  SKU - GET /api/skus
[0mGET /api/skus [32m200[0m 0.839 ms - 2[0m
    âœ” Get all sku

  SKU - GET /api/skus/:id
[0mGET /api/skus/1 [32m200[0m 1.826 ms - 152[0m
    âœ” Get sku by id
[0mGET /api/skus/123 [33m404[0m 0.624 ms - 11[0m
    âœ” Get sku by id
[0mGET /api/skus/hi [33m422[0m 0.558 ms - 22[0m
    âœ” Get sku by id

  SKU - PUT /api/sku/:id
[0mPUT /api/sku/1 [32m200[0m 2.639 ms - 4[0m
    âœ” Update an sku
[0mPUT /api/sku/2 [33m422[0m 1.074 ms - 22[0m
    âœ” Update an sku
[0mPUT /api/sku/9999 [33m404[0m 1.714 ms - 11[0m
    âœ” Update an sku

  SKU - PUT /api/sku/:id/position
[0mPUT /api/sku/1/position [32m200[0m 4.396 ms - 4[0m
    âœ” Update an sku position
[0mPUT /api/sku/2/position [33m422[0m 1.609 ms - 22[0m
    âœ” Update an sku position

  SKU - DELETE /api/sku/:id
    âœ” Delete an sku
    âœ” Delete an sku
[0mDELETE /api/skus/1 [32m204[0m 2.848 ms - -[0m
[0mDELETE /api/skus/9999 [32m204[0m 2.228 ms - -[0m

  SKU Item - POST /api/skuitem
[0mPOST /api/skuitem [32m201[0m 4.753 ms - 9[0m
    âœ” Insert an sku item
[0mPOST /api/skuitem [33m404[0m 5.223 ms - 11[0m
    âœ” Insert an sku item
[0mPOST /api/skuitem [33m422[0m 1.076 ms - 22[0m
    âœ” Insert an sku item

  SKU Item - GET /api/skuitems
[0mGET /api/skuitems [32m200[0m 9.148 ms - 2[0m
    âœ” Get all sku items

  SKU Item - GET /api/skuitems/sku/:id
[0mGET /api/skuitems/sku/1 [32m200[0m 11.051 ms - 2[0m
    âœ” Get sku items by sku id
[0mGET /api/skuitems/sku/9999 [33m404[0m 66.163 ms - 11[0m
    âœ” Get sku items by sku id (85ms)
[0mGET /api/skuitems/sku/wrong [33m422[0m 1.200 ms - 22[0m
    âœ” Get sku items by sku id

  SKU Item - GET /api/skuitems/:rfid
[0mGET /api/skuitems/12345678901234567890123456789015 [32m200[0m 1.170 ms - 100[0m
    âœ” Get sku item by rfid
[0mGET /api/skuitems/12345678901234567890123456789016 [33m404[0m 2.201 ms - 11[0m
    âœ” Get sku item by rfid
[0mGET /api/skuitems/wrong [33m422[0m 1.901 ms - 22[0m
    âœ” Get sku item by rfid

  SKU Item - PUT /api/skuitems/:rfid
[0mPUT /api/skuitems/12345678901234567890123456789015 [32m200[0m 2.468 ms - 4[0m
    âœ” Update an sku item
[0mPUT /api/skuitems/12312312312312312312312312312312 [33m404[0m 1.019 ms - 11[0m
    âœ” Update an sku item
[0mPUT /api/skuitems/wrong [33m422[0m 1.169 ms - 22[0m
    âœ” Update an sku item

  SKU Item - DELETE /api/skuitems/:rfid
[0mDELETE /api/skuitems/12345678901234567890123456789222 [32m204[0m 2.298 ms - -[0m
    âœ” Delete an sku item
[0mDELETE /api/skuitems/12345678901234567890123456789001 [33m422[0m 0.822 ms - 22[0m
    âœ” Delete an sku item
[0mDELETE /api/skuitems/wrong [33m422[0m 1.031 ms - 22[0m
    âœ” Delete an sku item

  TestDescriptor - POST /api/testDescriptor
[0mPOST /api/testDescriptor [32m201[0m 2.134 ms - 9[0m
    âœ” Insert a testDescriptor
[0mPOST /api/testDescriptor [33m422[0m 2.794 ms - 22[0m
    âœ” Insert a testDescriptor
[0mPOST /api/testDescriptor [33m404[0m 9.741 ms - 11[0m
    âœ” Insert a testDescriptor

  TestDescriptor- GET /api/testDescriptors
[0mGET /api/testDescriptors [32m200[0m 6.486 ms - 2[0m
    âœ” Get all testDescriptor

  TestDescriptor - GET /api/testDescriptors/:id
[0mGET /api/testDescriptors/null [33m422[0m 2.412 ms - 22[0m
[0mGET /api/testDescriptors/1 [32m200[0m 1.631 ms - 74[0m
    âœ” Get testDescriptor by id
[0mGET /api/testDescriptors/1 [33m404[0m 2.152 ms - 11[0m
    âœ” Get testDescriptor by id
[0mGET /api/testDescriptors/test [33m422[0m 1.229 ms - 22[0m
    âœ” Get testDescriptor by id

  TestDescriptor - PUT /api/testDescriptor/:id
    âœ” Update a testDescriptor
[0mPUT /api/testDescriptors/1 [33m404[0m 1.441 ms - 160[0m
    âœ” Update a testDescriptor
[0mPUT /api/testDescriptors/1 [33m404[0m 0.905 ms - 160[0m

  TestDescriptor - DELETE /api/testDescriptor/:id
[0mDELETE /api/testDescriptor/1 [32m204[0m 1.871 ms - -[0m
    âœ” Delete a testDescriptor
[0mDELETE /api/testDescriptor/id [33m422[0m 0.531 ms - 22[0m
    âœ” Delete a testDescriptor

  TestResult - POST /api/skuitems/testResult
[0mPOST /api/skuitems/testResult [32m201[0m 6.503 ms - 9[0m
    âœ” Insert a testResult
[0mPOST /api/skuitems/testResult [33m422[0m 2.183 ms - 22[0m
    âœ” Insert a testResult
[0mPOST /api/skuitems/testResult [33m404[0m 4.657 ms - 11[0m
    âœ” Insert a testResult

  TestResult- GET /api/skuitems/:rfid/testResults
[0mGET /api/skuitems/12345678901234567890123456789113/testResults [32m200[0m 1.200 ms - 2[0m
    âœ” Get all testResult by rfid
[0mGET /api/skuitems/1/testResults [33m422[0m 0.556 ms - 22[0m
    âœ” Get all testResult by rfid

  TestResult - GET /api/skuitems/:rfid/testResults/:id
[0mGET /api/skuitems/12345678901234567890123456789113/testResults/1 [32m200[0m 2.459 ms - 63[0m
    âœ” Get testResult by rfid and id
[0mGET /api/skuitems/12345678901234567890123456789113/testResults/test [33m422[0m 2.087 ms - 22[0m
    âœ” Get testResult by rfid and id
[0mGET /api/skuitems/12345678901234567890123456789113/testResults/1 [33m404[0m 0.888 ms - 11[0m
    âœ” Get testResult by rfid and id

  TestResult - PUT /api/skuitems/:rfid/testResult/:id
    âœ” Update a testResult
[0mPUT /api/skuitems/12345678901234567890123456789113/testResult/1 [33m422[0m 1.968 ms - 22[0m
    âœ” Update a testResult
[0mPUT /api/skuitems/2/testResult/1 [33m422[0m 1.037 ms - 22[0m

  TestResult - DELETE /api/skuitems/:rfid/testResult/:id
[0mDELETE /api/skuitems/12345678901234567890123456789113/testResult/1 [32m204[0m 1.803 ms - -[0m
    âœ” Delete a testResult
[0mDELETE /api/skuitems/12345678901234567890123456789113/testResult/id [33m422[0m 0.597 ms - 22[0m
    âœ” Delete a testResult

  User - POST /api/newUser
[0mPOST /api/newUser [32m201[0m 237.426 ms - 9[0m
    âœ” Correct new user insertion (240ms)
[0mPOST /api/newUser [33m409[0m 0.628 ms - -[0m
    âœ” Inserting user already present in system
[0mPOST /api/newUser [33m422[0m 0.364 ms - 22[0m
    âœ” Inserting a manager user
[0mPOST /api/newUser [33m422[0m 0.396 ms - 22[0m
    âœ” Inserting user with wrong email
[0mPOST /api/newUser [33m422[0m 0.383 ms - 22[0m
    âœ” Inserting user with a password that is too short

  User - POST /api/managerSessions
[0mPOST /api/managerSessions [32m200[0m 190.497 ms - 63[0m
    âœ” Testing correct log in into manager session. (194ms)
[0mPOST /api/managerSessions [33m401[0m 115.862 ms - 47[0m
    âœ” Testing log in into manager session with wrong password. (119ms)
[0mPOST /api/managerSessions [33m401[0m 0.595 ms - 47[0m
    âœ” Testing log in into manager session with wrong email.

  User - POST /api/customerSessions
[0mPOST /api/customerSessions [32m200[0m 90.300 ms - 63[0m
    âœ” Testing correct log in into customer session. (92ms)
[0mPOST /api/customerSessions [33m401[0m 94.152 ms - 47[0m
    âœ” Testing log in into customer session with wrong password. (95ms)
[0mPOST /api/customerSessions [33m401[0m 0.605 ms - 47[0m
    âœ” Testing log in into customer session with wrong email.

  User - POST /api/supplierSessions
[0mPOST /api/supplierSessions [32m200[0m 91.618 ms - 63[0m
    âœ” Testing correct log in into supplier session. (94ms)
[0mPOST /api/supplierSessions [33m401[0m 102.495 ms - 47[0m
    âœ” Testing log in into supplier session with wrong password. (108ms)
[0mPOST /api/supplierSessions [33m401[0m 0.625 ms - 47[0m
    âœ” Testing log in into supplier session with wrong email.

  User - POST /api/clerkSessions
[0mPOST /api/clerkSessions [32m200[0m 177.027 ms - 63[0m
    âœ” Testing correct log in into clerk session. (179ms)
[0mPOST /api/clerkSessions [33m401[0m 102.553 ms - 47[0m
    âœ” Testing log in into clerk session with wrong password. (105ms)
[0mPOST /api/clerkSessions [33m401[0m 0.676 ms - 47[0m
    âœ” Testing log in into clerk session with wrong email.

  User - POST /api/qualityEmployeeSessions
[0mPOST /api/qualityEmployeeSessions [32m200[0m 90.588 ms - 63[0m
    âœ” Testing correct log in into qualityEmployee session. (92ms)
[0mPOST /api/qualityEmployeeSessions [33m401[0m 91.130 ms - 47[0m
    âœ” Testing log in into qualityEmployee session with wrong password. (93ms)
[0mPOST /api/qualityEmployeeSessions [33m401[0m 1.083 ms - 47[0m
    âœ” Testing log in into qualityEmployee session with wrong email.

  User - POST /api/deliveryEmployeeSessions
[0mPOST /api/deliveryEmployeeSessions [32m200[0m 93.385 ms - 63[0m
    âœ” Testing correct log in into deliveryEmployee session. (95ms)
[0mPOST /api/deliveryEmployeeSessions [33m401[0m 96.280 ms - 47[0m
    âœ” Testing log in into deliveryEmployee session with wrong password. (97ms)
[0mPOST /api/deliveryEmployeeSessions [33m401[0m 0.658 ms - 47[0m
    âœ” Testing log in into deliveryEmployee session with wrong email.

  User - POST /api/logout
[0mPOST /api/logout [32m200[0m 0.357 ms - 4[0m
    âœ” Testing login.

  User - GET /api/suppliers
[0mGET /api/suppliers [32m200[0m 0.826 ms - 159[0m
    âœ” Testing GET all suppliers.

  User - GET /api/users
[0mGET /api/users [32m200[0m 1.209 ms - 195[0m
    âœ” Testing GET all suppliers.

  User - PUT /api/users/:username
[0mPUT /api/users/michael.scott@ezwh.com [32m200[0m 4.292 ms - 4[0m
    âœ” Testing correct type changing.
[0mPUT /api/users/michael.scott@ezwh.com [33m404[0m 3.203 ms - 11[0m
    âœ” Testing type changing with wrong old type.
[0mPUT /api/users/michae.scott@ezwh.com [33m404[0m 0.533 ms - 11[0m
    âœ” Testing type changing with wrong email.
[0mPUT /api/users/dwight.shrute@ezwh.com [33m422[0m 0.350 ms - 22[0m
    âœ” Testing type changing of a manager.

  User - DELETE /api/users/:username/:type
[0mDELETE /api/users/michael.scottezwh.com/supplier [33m422[0m 0.424 ms - 22[0m
    âœ” Testing deleting of a user with wrong email.
[0mDELETE /api/users/michael.scott@ezwh.com/clerk [33m422[0m 0.479 ms - 22[0m
    âœ” Testing deleting of a user with wrong type.
[0mDELETE /api/users/michael.scott@ezwh.com/supplier [32m204[0m 4.100 ms - -[0m
    âœ” Testing correct deleting of a user.
[0mDELETE /api/users/dwight.shrute@ezwh.com/manager [33m422[0m 0.225 ms - 22[0m
    âœ” Testing deleting a manager.


  138 passing (16s)
  4 failing

  1) RestockOrder -/api/restockOrder/...
       getting all restock orders from the system:
     Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/michelemorgigno/Dropbox (Politecnico Di Torino Studenti)/PoliTo/Software Engineering/progetto_gruppo/EzWh/code/server/test/api_restock_order.js)
      at listOnTimeout (node:internal/timers:564:17)
      at process.processTimers (node:internal/timers:507:7)

  2) RestockOrder -/api/restockOrder/...
       getting all restock orders in state issued from the system:
     Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/michelemorgigno/Dropbox (Politecnico Di Torino Studenti)/PoliTo/Software Engineering/progetto_gruppo/EzWh/code/server/test/api_restock_order.js)
      at listOnTimeout (node:internal/timers:564:17)
      at process.processTimers (node:internal/timers:507:7)

  3) ReturnOrder - POST /api/returnOrder
       Testing creation of new return order.:
     Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/michelemorgigno/Dropbox (Politecnico Di Torino Studenti)/PoliTo/Software Engineering/progetto_gruppo/EzWh/code/server/test/api_return_order.js)
      at listOnTimeout (node:internal/timers:564:17)
      at process.processTimers (node:internal/timers:507:7)

  4) ReturnOrder - GET /api/returnOrders
       Testing getting all return orders.:
     Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/michelemorgigno/Dropbox (Politecnico Di Torino Studenti)/PoliTo/Software Engineering/progetto_gruppo/EzWh/code/server/test/api_return_order.js)
      at listOnTimeout (node:internal/timers:564:17)
      at process.processTimers (node:internal/timers:507:7)



